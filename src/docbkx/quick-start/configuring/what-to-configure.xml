<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="quickstart-config-what"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>What to Configure in Jetty</title>

  <para>This section gives an overview of the components of Jetty you
  typically configure using the mechanisms outlined in the previous section.
  <xref linkend="basic-architecture"/> describes the structure of a Jetty
  server, which is good background reading to understand configuration, and is
  vital if you want to change the structure of the server as set up by the
  default configurations in the Jetty distribution. However, for most
  purposes, configuration is a matter of identifying the correct configuration
  file and modifying existing configuration values.</para>

  <section xml:id="intro-jetty-configuration-server">
    <title>Configuring the
    Server</title>

    <para>The Server instance is the central coordination object of a Jetty
    server; it provides services and life cycle management for all other Jetty
    server components. In the standard Jetty distribution, the core server
    configuration is in <filename>etc/jetty.xml</filename> file, but you can
    mix in other server configuration which can include:</para>

    <variablelist>
      <varlistentry>
        <term>ThreadPool</term>

        <listitem>
          <para>The Server instance provides a ThreadPool instance that is the
          default Executor service other Jetty server components use. The
          prime configuration of the thread pool is the maximum and minimum
          size and is set in <filename>etc/jetty.xml.</filename></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Handlers</term>

        <listitem>
          <para>A Jetty server can have only a single Handler instance to
          handle incoming HTTP requests. However a handler may be a container
          or wrapper of other handlers forming a tree of handlers that
          typically handle a request as a collaboration between the handlers
          from a branch of the tree from root to leaf. The default handler
          tree set up in the <filename>etc/jetty.xml</filename> file is a
          Handler Collection containing a Context Handler Collection and the
          Default Handler. The Context Handler Collection selects the next
          handler by context path and is where deployed Context Handler and
          Web Application Contexts are added to the handler tree. The Default
          Handler handles any requests not already handled and generates the
          standard 404 page. Other configuration files may add handlers to
          this tree (for example, <filename>jetty-rewrite.xml</filename>,
          <filename>jetty-requestlog.xml</filename>) or configure components
          to hot deploy handlers (for example,
          <filename>jetty-deploy.xml</filename>).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Server Attributes</term>

        <listitem>
          <para>The server holds a generic attribute map of strings to objects
          so that other Jetty components can associate named objects with the
          server, and if the value objects implement the LifeCycle interface,
          they are started and stopped with the server. Typically server
          attributes hold server-wide default values.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Server fields</term>

        <listitem>
          <para>The server also has some specific configuration fields that
          you set in <filename> etc/jetty.xml</filename> for controlling among
          other things, the sending of dates and versions in HTTP
          responses.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Connectors</term>

        <listitem>
          <para>The server holds a collection of connectors that receive
          connections for HTTP and the other protocols that Jetty supports.
          The next section, <xref
          linkend="intro-jetty-configuration-connectors"/> describes
          configuration of the connectors themselves. For the server you can
          either set the collection of all connectors or add/remove individual
          connectors.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Services</term>

        <listitem>
          <para>The server can hold additional service objects, sometimes as
          attributes, but often as aggregated LifeCycle beans. Examples of
          services are Login Services and DataSources, which you configure at
          the server level and then inject into the web applications that use
          them.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="intro-jetty-configuration-connectors">
    <title>Configuring Connectors</title>

    <para>A Jetty Server Connector is a network end point that accepts
    connections for one or more protocols which produce requests and/or
    messages for the Jetty server. In the standard Jetty server distribution,
    several provided configuration files add connectors to the server for
    various protocols and combinations of protocols: <filename>
    jetty-http.xml, jetty-https.xml</filename> and
    <filename>jetty-spdy.xml</filename>. The configuration needed for
    connectors is typically:</para>

    <variablelist>
      <varlistentry>
        <term>Port</term>

        <listitem>
          <para>The TCP/IP port on which the connector listens for connections
          is set using the the XML Property element which looks up the
          <code>jetty.port</code> (or <code>jetty.tls.port</code>) property,
          and if not found defaults to 8080 (or 8443 for TLS).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Host</term>

        <listitem>
          <para>You can configure a host either as a host name or IP address
          to identify a specific network interface on which to listen. If not
          set, or set to the value of 0.0.0.0, the connector listens on all
          local interfaces. The XML Property element is used to look up the
          host value from the <code> jetty.host</code> property.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Idle Timeout</term>

        <listitem>
          <para>The time in milliseconds that a connection can be idle before
          the connector takes action to close the connection.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>HTTP Configuration</term>

        <listitem>
          <para>Connector types that accept HTTP semantics (including HTTP,
          HTTPS and SPDY) are configured with a HttpConfiguration instance
          that contains common HTTP configuration that is independent of the
          specific wire protocol used. Because these values are often common
          to multiple connector types, the standard Jetty Server distribution
          creates a single HttpConfiguration in the
          <filename>jetty.xml</filename> file which is used via the XML Ref
          element in the specific connector files.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>SSL Context Factory</term>

        <listitem>
          <para>The TLS connector types (HTTPS and SPDY) configure an SSL
          Context Factory with the location of the server keystore and
          truststore for obtaining server certificates.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <para>Virtual hosts are not configured on connectors. You must configure
      individual contexts with the virtual hosts to which they respond.</para>
    </note>

    <note>
      <para>Prior to Jetty 9, the type of the connector reflected both the
      protocol supported (HTTP, HTTPS, AJP, SPDY), and the nature of the
      implementation (NIO or BIO). From Jetty 9 onwards there is only one
      prime Connector type (ServerConnector), which is NIO based and uses
      Connection Factories to handle one or more protocols.</para>
    </note>
  </section>

  <section xml:id="intro-jetty-configuration-contexts">
    <title>Configuring
    Contexts</title>

    <para>A Jetty context is a handler that groups other handlers under a
    context path together with associated resources and is roughly equivalent
    to the standard ServletContext API. A context may contain either standard
    Jetty handlers or a custom application handler.</para>

    <note>
      <para>The servlet specification defines a web application. In Jetty a
      standard web application is a specialized context that uses a standard
      layout and <filename>WEB-INF/web.xml</filename> to instantiate and
      configure classpath, resource base and handlers for sessions, security,
      and servlets, plus servlets for JSPs and static content. Standard web
      applications often need little or no additional configuration, but you
      can also use the techniques for arbitrary contexts to refine or modify
      the configuration of standard web applications.</para>
    </note>

    <para>Configuration values that are common to all contexts are:</para>

    <variablelist>
      <varlistentry>
        <term>contextPath</term>

        <listitem>
          <para>The contextPath is a URL prefix that identifies which context
          a HTTP request is destined for. For example, if a context has a
          context path <filename>/foo</filename>, it handles requests to
          <filename> /foo</filename>, <filename>/foo/index.html</filename>,
          <filename>/foo/bar/</filename>, and <filename>
          /foo/bar/image.png</filename> but it does not handle requests like
          <filename>/</filename>, <filename> /other/</filename>, or
          <filename>/favicon.ico</filename>. A context with a context path of
          / is called the root context.</para>

          <para>The context path can be set by default from the deployer
          (which uses the filename as the basis for the context path); or in
          code; or it can be set by a Jetty IoC XML that is either applied by
          the deployer or found in the
          <filename>WEB-INF/jetty-web.xml</filename> file of a standard web
          app context.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>virtualHost</term>

        <listitem>
          <para>A context may optionally have one or more virtual hosts set.
          Unlike the host set on a connector (which selects the network
          interface on which to listen), a virtual host does not set any
          network parameters. Instead a virtual host represents an alias
          assigned by a name service to an IP address, which may have many
          aliases. To determine which virtual host a request is intended for,
          the HTTP client (browser) includes in the request the name used to
          look up the network address. A context with a virtual host set only
          handles requests that have a matching virtual host in their request
          headers.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>classPath</term>

        <listitem>
          <para>A context may optionally have a classpath, so that any thread
          that executes a handler within the context has a thread context
          classloader set with the classpath. A standard web application has
          the classpath initialized by the <filename>WEB-INF/lib</filename>
          and <filename>WEB-INF/classes</filename> directory and has
          additional rules about delegating classloading to the parent
          classloader. All contexts may have additional classpath entries
          added.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>attributes</term>

        <listitem>
          <para>Attributes are arbitrary named objects that are associated
          with a context and are frequently used to pass entities between a
          web application and its container. For example the attribute <code>
          javax.servlet.context.tempdir</code> is used to pass the File
          instance that represents the assigned temporary directory for a web
          application.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>resourceBase</term>

        <listitem>
          <para>The resource base is a directory (or collection of directories
          or URL) that contains the static resources for the context. These
          can be images and HTML files ready to serve or JSP source files
          ready to be compiled. In traditional web servers this value is often
          called the docroot.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section>
      <title>Context Configuration by API</title>

      <para>In an embedded server, you configure contexts by directly calling
      the <link
      xl:href="@JDURL@/org/eclipse/jetty/server/handler/ContextHandler.html">ContextHandler</link>
      API as in the following example:</para>

      <informalexample>
        <programlisting language="rjava"><filename>@GITURL@/examples/embedded/src/main/java/org/eclipse/jetty/embedded/OneContext.java</filename></programlisting>
      </informalexample>
    </section>

    <section>
      <title>Context Configuration by IoC XML</title>

      <para>You can create and configure a context entirely by IoC XML (either
      Jetty's or Spring). The deployer discovers and hot deploys context IoC
      descriptors like the following which creates a context to serve the
      Javadoc from the Jetty distribution:</para>

      <informalexample>
        <programlisting language="rxml"><filename>@GITURL@/jetty-distribution/src/main/resources/webapps.demo/javadoc.xml</filename></programlisting>
      </informalexample>
    </section>
  </section>

  <section xml:id="intro-jetty-configuration-webapps">
    <title>Configuring Web
    Applications</title>

    <para>The servlet specification defines a web application, which when
    packaged as a zip is called WAR file (Web application ARchive). Jetty
    implements both WAR files and unpacked web applications as a specialized
    context that is configured by means of:</para>

    <itemizedlist>
      <listitem>
        <para>A standard layout which sets the location of the resourceBase
        (the root of the WAR) and initializes the classpath from jars found in
        WEB-INF/lib and classes found in WEB-INF/classes.</para>
      </listitem>

      <listitem>
        <para>The standard <filename>WEB-INF/web.xml</filename> deployment
        descriptor which is parsed to define and configure init parameters,
        filters, servlets, listeners, security constraints, welcome files and
        resources to be injected.</para>
      </listitem>

      <listitem>
        <para>A default <filename>web.xml</filename> format deployment
        descriptor provided either by Jetty or in configuration configures the
        JSP servlet and the default servlet for handling static content. The
        standard <filename>web.xml</filename> may override the default
        <filename>web.xml</filename>.</para>
      </listitem>

      <listitem>
        <para>Annotations discovered on classes in Jars contained in
        <filename>WEB-INF/lib</filename> can declare additional filters,
        servlets and listeners.</para>
      </listitem>

      <listitem>
        <para>Standard deployment descriptor fragments discovered in Jars
        contained in <filename> WEB-INF/lib</filename> can declare additional
        init parameters, filters, servlets, listeners, security constraints,
        welcome files and resources to be injected.</para>
      </listitem>

      <listitem>
        <para>An optional <filename>WEB-INF/jetty-web.xml</filename> file may
        contain Jetty IoC configuration to configure the Jetty specific APIs
        of the context and handlers.</para>
      </listitem>
    </itemizedlist>

    <para>Because these configuration mechanisms are contained within the WAR
    file (or unpacked web application), typically a web application contains
    much of its own configuration and deploying a WAR is often just a matter
    of dropping the WAR file in to the webapps directory that is scanned by
    the <link linkend="quickstart-config-deployer">jetty
    deployer</link>.</para>

    <para>If you need to configure something within a web application, often
    you do so by unpacking the WAR file and editing the
    <filename>web.xml</filename> and other configuration files. However, both
    the servlet standard and some Jetty features allow for other configuration
    to be applied to a web application externally from the WAR:</para>

    <itemizedlist>
      <listitem>
        <para>You configure datasources and security realms in the server and
        inject them into a web application either explicitly or by name
        matching.</para>
      </listitem>

      <listitem>
        <para>Jetty allows one or more override deployment descriptors, in
        <filename>web.xml</filename> format, to be set on a context (via code
        or IoC XML) to amend the configuration set by the default and standard
        <filename> web.xml</filename>.</para>
      </listitem>

      <listitem>
        <para>The normal Jetty Java API may be called by code or IoC XML to
        amend the configuration of a web application.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Setting the Context Path</title>

      <para>The web application standard provides no configuration mechanism
      for a web application or WAR file to set its own contextPath. By default
      the deployer uses conventions to set the context path: If you deploy a
      WAR file called <filename>foobar.WAR</filename>, the context path is
      <filename>/foobar</filename>; if you deploy a WAR file called
      <filename>ROOT.WAR</filename> the context path is /. However, it is
      often desirable to explicitly set the context path so that information
      (for example, version numbers) may be included in the filename of the
      WAR. Jetty allows the context Path of a WAR file to be set internally
      (by the WAR itself) or externally (by the deployer of the WAR).</para>

      <para>To set the contextPath from within the WAR file, you can include a
      <filename> WEB-INF/jetty-web.xml</filename> file which contains IoC XML
      to set the context path:</para>

      <informalexample>
        <programlisting language="xml">
<![CDATA[
<?xml version="1.0"  encoding="ISO-8859-1"?>
<!DOCTYPE Configure PUBLIC "-" "http://www.eclipse.org/jetty/configure.dtd">
<Configure class="org.eclipse.jetty.webapp.WebAppContext">
    <Set name="contextPath">/contextpath</Set>
</Configure>
]]>
        </programlisting>
      </informalexample>

      <para>Alternately, to configure the classpath externally without the
      need to modify the WAR file itself, instead of allowing the WAR file to
      be discovered by the deployer, an IoC XML file may be deployed that both
      sets the context path and declares the WAR file that it applies
      to:</para>

      <informalexample>
        <programlisting language="xml">
<![CDATA[
?xml version="1.0"  encoding="ISO-8859-1"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure.dtd">
<Configure class="org.eclipse.jetty.webapp.WebAppContext">
  <Set name="war"><SystemProperty name="jetty.home" default="."/>/webapps/test.war</Set>
  <Set name="contextPath">/test</Set>
</Configure>      
]]>
        </programlisting>
      </informalexample>

      <para>An example of setting the context path is included with the Jetty
      distribution in <filename>
      $JETTY_HOME/webapps/test.xml</filename>.</para>
    </section>

    <section>
      <title>Setting an Authentication Realm</title>

      <para>The authentication method and realm name for a standard web
      application may be set in the <filename> web.xml</filename> deployment
      descriptor with elements like:</para>

      <informalexample>
        <programlisting language="xml">
<![CDATA[
...
<login-config>
  <auth-method>BASIC</auth-method>
  <realm-name>Test Realm</realm-name>
</login-config>
...        
]]>
        </programlisting>
      </informalexample>

      <para>This example declares that the BASIC authentication mechanism will
      be used with credentials validated against a realm called "Test Realm."
      However the standard does not describe how the realm itself is
      implemented or configured. In Jetty, there are several realm
      implementations (called LoginServices) and the simplest of these is the
      HashLoginService, which can read usernames and credentials from a Java
      properties file.</para>

      <para>To configure an instance of HashLoginService that matches the
      "Test Realm" configured above, the following
      <filename>$JETTY_HOME/etc/test-realm.xml</filename> IoC XML file should
      be passed on the command line or set in
      <filename>start.ini</filename>.</para>

      <informalexample>
        <programlisting language="rxml">
          <filename>@GITURL@/tests/test-webapps/test-jetty-webapp/src/main/config/etc/test-realm.xml</filename>
        </programlisting>
      </informalexample>

      <para>This creates and configures the LoginService as an aggregate bean
      on the server. When a web application is deployed that declares a realm
      called "Test Realm," the server beans are searched for a matching Login
      Service.</para>
    </section>
  </section>

  <section xml:id="quickstart-config-deployer">
    <title >Web Application
    Deployment</title>

    <para>Jetty is capable of deploying a variety of Web Application formats.
    This is accomplished via scans of the
    <filename>${jetty.home}/webapps</filename> directory for contexts to
    deploy.</para>

    <para>A Context can be any of the following:</para>

    <itemizedlist>
      <listitem>
        <para>A standard WAR file. (must in
        "<filename>.war</filename>").</para>
      </listitem>

      <listitem>
        <para>A directory containing an expanded WAR file. (must contain
        <filename>{dir}/WEB-INF/web.xml</filename> file).</para>
      </listitem>

      <listitem>
        <para>A directory containing static content.</para>
      </listitem>

      <listitem>
        <para>A XML descriptor in <xref linkend="jetty-xml-syntax"/> that
        configures a <link
        xl:href="@JDURL@/org/eclipse/jetty/server/handler/ContextHandler.html">ContextHandler</link>
        instance (Such as a <link
        xl:href="@JDURL@/org/eclipse/jetty/webapp/WebAppContext.html">WebAppContext</link>).</para>
      </listitem>
    </itemizedlist>

    <para>The new WebAppProvider will attempt to avoid double deployments
    during the directory scan with the following heuristics:</para>

    <itemizedlist>
      <listitem>
        <para>Hidden files (starting with <filename>"."</filename>) are
        ignored</para>
      </listitem>

      <listitem>
        <para>Directories with names ending in <filename>".d"</filename> are
        ignored</para>
      </listitem>

      <listitem>
        <para>If a directory and matching WAR file exist with the same base
        name (eg: <filename>foo/</filename> and <filename>foo.war</filename>),
        then the directory is assumed to be the unpacked WAR and only the WAR
        is deployed (which may reuse the unpacked directory)</para>
      </listitem>

      <listitem>
        <para>If a directory and matching XML file exists (eg:
        <filename>foo/</filename> and <filename>foo.xml</filename>), then the
        directory is assumed to be an unpacked WAR and only the XML is
        deployed (which may use the directory in its own configuration)</para>
      </listitem>

      <listitem>
        <para>If a WAR file and matching XML file exist (eg:
        <filename>foo.war</filename> and <filename>foo.xml</filename>), then
        the WAR is assumed to be configured by the XML and only the XML is
        deployed.</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>In prior versions of Jetty there was a separate ContextDeployer
      that provided the XML based deployment, the ContextDeployer no longer
      exists starting in Jetty9 and its functionality has been merged with the
      new <link
      xl:href="@JDURL@/org/eclipse/jetty/deploy/providers/WebAppProvider.html">WebAppProvider</link>
      in to avoid several double deployment scenarios that are
      possible.</para>
    </note>

    <para>A Context is an instance of ContextHandler that aggregates other
    handlers with common resources for handling HTTP requests (such as
    resource base, class loader, configuration attributes). A standard web
    application is a specialized instance of a context (called a
    WebAppContext) that uses standard layouts and <filename>web.xml</filename>
    deployment descriptors to configure the context.</para>

    <para/>
  </section>
</section>
