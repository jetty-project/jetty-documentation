<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="session-clustering-jdbc"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Session Clustering with a Database</title>

  <para>Jetty can support session clustering by persisting sessions to a
  shared database. Each Jetty instance locally caches sessions for which it
  has received requests, writing any changes to the session through to the
  database as the request exits the server. Sessions must obey the
  Serialization contract, and servlets must call the Session.setAttribute()
  method to ensure that changes are persisted.</para>

  <para>The persistent session mechanism works in conjunction with a load
  balancer that supports stickiness. Stickiness can be based on various data
  items, such as source IP address or characteristics of the session ID or a
  load-balancer specific mechanism. For those load balancers that examine the
  session ID, the Jetty persistent session mechanism appends a node ID to the
  session ID, which can be used for routing.</para>

  <para>In this type of solution, the database can become both a bottleneck
  and a single point of failure. Jetty takes steps to reduce the load on the
  database (discussed below), but in a heavily loaded environment you might
  need to investigate other optimization strategies such as local caching and
  database replication. You should also consult your database vendor's
  documentation for information on how to ensure high availability and
  failover of your database.</para>

  <section>
    <title>Configuration</title>

    <para>There are two components to session management in Jetty: a session
    ID manager and a session manager.</para>

    <itemizedlist>
      <listitem>
        <para>The session ID manager ensures that session IDs are unique
        across all webapps hosted on a Jetty instance, and thus there can only
        be one session ID manager per Jetty instance.</para>
      </listitem>

      <listitem>
        <para>The session manager handles the session lifecycle
        (create/update/invalidate/expire) on behalf of a web application, so
        there is one session manager per web application instance.</para>
      </listitem>
    </itemizedlist>

    <para>These managers also cooperate and collaborate with the
    <code>org.eclipse.jetty.server.session.SessionHandler</code> to enable
    cross-context dispatch.</para>
  </section>

  <section>
    <title>The jdbc-session Module</title>

    <para>When using the jetty distribution, to enable jdbc session
    persistence, you will first need to enable the jdbc-session <link
    linkend="startup-modules">module</link> for your <link
    linkend="creating-jetty-base">base</link> using the --add-to-start or
    --add-to-startd argument to the <link
    linkend="startup-overview">start.jar</link>. </para>

    <para>You will also find the following properties, either in your base's
    start.d/jdbc-session.ini file or appended to your start.ini, depending on
    how you enabled the module:</para>

    <informalexample>
      <programlisting><![CDATA[## Unique identifier for this node in the cluster
jetty.jdbcSession.workerName=node1

##Uncomment either the datasource name or driverClass and connectionURL
#jetty.jdbcSession.datasource=sessions
jetty.jdbcSession.driverClass=org.apache.derby.jdbc.EmbeddedDriver
jetty.jdbcSession.connectionURL=jdbc:derby:sessions;create=true

]]></programlisting>
    </informalexample>

    <para><variablelist>
        <varlistentry>
          <term>jetty.jdbcSession.workerName</term>

          <listitem>
            <para>The name that uniquely identifies this node in the cluster.
            This value will also be used by the sticky load balancer to
            identify the node. Don't forget to change the value of this
            property on <emphasis role="bold">each</emphasis> node on which
            you enable jdbc session clustering.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jetty.jdbcSession.scavenge</term>

          <listitem>
            <para>The time in seconds between sweeps of a task which scavenges
            old expired sessions. The default is 10 mins. We don't recommend
            you increase the frequency bcause doing so increases the load on
            the database with very little gain.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jetty.jdbcSession.datasource</term>

          <listitem>
            <para>The name of a javax.sql.DataSource that gives access to the
            database that holds the session information. You should configure
            <emphasis role="bold">either</emphasis> this or the jdbc driver
            information described next.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jetty.jdbcSession.datasource and
          jetty.jdbcSession.connectionURL</term>

          <listitem>
            <para>This is the name of the jdbc driver class, and a jdbc
            connection url suitable for that driver. You should configure
            <emphasis role="bold">either</emphasis> this or the jdbc
            datasource name described above.</para>
          </listitem>
        </varlistentry>
      </variablelist>These properties are applied to the JDBCSessionIdManager
    described below.</para>

    <section>
      <title>Configuring the JDBCSessionIdManager</title>

      <para
      xl:href="@JDURL@/org/eclipse/jetty/nosql/mongodb.MongoSessionIdManager.html">The
      jdbc-session module will have installed file called
      ${jetty.home}/etc/jetty-jdbc-sessions.xml. This file configures an
      instance of the JDBCSessionIdManager that will be shared across all
      webapps deployed on that server. It looks like this:</para>

      <programlisting language="rxml"><filename>@GITURL@/jetty-server/src/main/config/etc/jetty-jdbc-sessions.xml</filename></programlisting>

      <para>As well as uncommenting and setting up appropriate values for the
      properties we discussed above, you will also need to edit this file and
      uncomment <emphasis role="bold">either</emphasis> the datasource or the
      driver info elements.</para>

      <para>As Jetty configuration files are direct mappings of XML to Java,
      it is straightforward to see how to do this in code, but here's an
      example anyway:</para>

      <informalexample>
        <programlisting language="java"><![CDATA[
    
Server server = new Server();
     ...
JDBCSessionIdManager idMgr = new JDBCSessionIdManager(server);
idMgr.setWorkerName("node1");
idMgr.setDriverInfo("com.mysql.jdbc.Driver", "jdbc:mysql://127.0.0.1:3306/sessions?user=janb");
idMgr.setScavengeInterval(600);
server.setSessionIdManager(idMgr);
 ]]></programlisting>
      </informalexample>

      <section>
        <title>Configuring the Database Schema</title>

        <para>You may find it necessary to change the names of the tables and
        columns that the JDBC Session management uses to store the session
        information. The defaults used are:</para>

        <para><table border="1">
            <caption>Default Values for Session Id Table</caption>

            <colgroup width="16%"/>

            <colgroup width="84%"/>

            <tr>
              <td>table name</td>

              <td>JettySessionIds</td>
            </tr>

            <tr>
              <td>columns</td>

              <td>id</td>
            </tr>
          </table><table border="1">
            <caption>Default Values for Session Table</caption>

            <colgroup width="15%"/>

            <colgroup width="85%"/>

            <tr>
              <td>table name</td>

              <td>JettySessions</td>
            </tr>

            <tr>
              <td>columns</td>

              <td>rowId, sessionId, contextPath, virtualHost, lastNode,
              accessTime, lastAccessTime, createTime, cookieTime,
              lastSavedTime, expiryTime, maxInterval, map</td>
            </tr>
          </table>To change these values, use the <link
        xl:href="@JDURL@/org/eclipse/jetty/server/session/JDBCSessionIdManager.SessionIdTableSchema.html">org.eclipse.jetty.server.session.JDBCSessionIdManager.SessionIdTableSchema</link>
        and <link
        xl:href="@JDURL@/org/eclipse/jetty/server/session/JDBCSessionIdManager.SessionTableSchema.html">org.eclipse.jetty.server.session.JDBCSessionIdManager.SessionTableSchema</link>
        classes. These classes have getter/setter methods for the table name
        and all columns.</para>

        <para>Here's an example of changing the name of JettySessionsId table
        and its single column. This example will use java code, but as
        explained above, you may also do this via a jetty xml configuration
        file:</para>

        <programlisting language="java"><![CDATA[JDBCSessionIdManager idManager = new JDBCSessionIdManager(server);

SessionIdTableSchema idTableSchema = new SessionIdTableSchema();
idTableSchema.setTableName("mysessionids");
idTableSchema.setIdColumn("theid");
idManager.setSessionIdTableSchema(idTableSchema);]]></programlisting>

        <para>In a similar fashion, you can change the names of the table and
        columns for the JettySessions table. <emphasis
        role="bold">Note</emphasis> that both the SessionIdTableSchema and the
        SessionTableSchema instances are set on the JDBCSessionIdManager
        class.</para>

        <programlisting language="java"><![CDATA[JDBCSessionIdManager idManager = new JDBCSessionIdManager(server);

SessionTableSchema sessionTableSchema = new SessionTableSchema();
sessionTableSchema.setTableName("mysessions");
sessionTableSchema.setIdColumn("mysessionid");
sessionTableSchema.setAccessTimeColumn("atime");
sessionTableSchema.setContextPathColumn("cpath");
sessionTableSchema.setCookieTimeColumn("cooktime");
sessionTableSchema.setCreateTimeColumn("ctime");
sessionTableSchema.setExpiryTimeColumn("extime");
sessionTableSchema.setLastAccessTimeColumn("latime");
sessionTableSchema.setLastNodeColumn("lnode");
sessionTableSchema.setLastSavedTimeColumn("lstime");
sessionTableSchema.setMapColumn("mo");
sessionTableSchema.setMaxIntervalColumn("mi");           
idManager.setSessionTableSchema(sessionTableSchema);]]></programlisting>
      </section>
    </section>

    <section>
      <title>Configuring the JDBCSessionManager</title>

      <para>As mentioned elsewhere, there should be one JDBCSessionManager per
      context (ie webapp). It will need to reference the single
      JDBCSessionIdManager configured previously for the Server.</para>

      <para>The way you configure a JDBCSessionManager depends on whether
      you're configuring from a context xml file or a
      <filename>jetty-web.xml</filename> file or code. The basic difference is
      how you get a reference to the Jetty
      <code>org.eclipse.jetty.server.Server</code> instance.</para>

      <para>From a context xml file, you reference the Server instance as a
      Ref:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[
  <Ref id="Server">
    <Call id="idMgr" name="getSessionIdManager"/>
  </Ref>
  <Set name="sessionHandler">
    <New class="org.eclipse.jetty.server.session.SessionHandler">
      <Arg>
        <New id="jdbcmgr" class="org.eclipse.jetty.server.session.JDBCSessionManager">
          <Set name="sessionIdManager">
            <Ref id="idMgr"/>
          </Set>
        </New>
      </Arg>
    </New>
  </Set>

]]></programlisting>
      </informalexample>

      <para>From a <filename>WEB-INF/jetty-web.xml</filename> file, you can
      reference the Server instance directly:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[
  
<Get name="server">
  <Get id="idMgr" name="sessionIdManager"/>
</Get>
<Set name="sessionHandler">
  <New class="org.eclipse.jetty.server.session.SessionHandler">
    <Arg>
      <New class="org.eclipse.jetty.server.session.JDBCSessionManager">
        <Set name="sessionIdManager">
          <Ref id="idMgr"/>
        </Set>
      </New>
    </Arg>
  </New>
</Set>

]]></programlisting>
      </informalexample>

      <para>If you're embedding this in code:</para>

      <informalexample>
        <programlisting language="java"><![CDATA[

//assuming you have already set up the JDBCSessionIdManager as shown earlier
//and have a reference to the Server instance:
 
WebAppContext wac = new WebAppContext();
 ... //configure your webapp context
JDBCSessionManager jdbcMgr = new JDBCSessionManager();
jdbcMgr.setSessionIdManager(server.getSessionIdManager());
SessionHandler sessionHandler = new SessionHandler(jdbcMgr);
wac.setSessionHandler(sessionHandler);

]]></programlisting>
      </informalexample>
    </section>
  </section>
</section>
