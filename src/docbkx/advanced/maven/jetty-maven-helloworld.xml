<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="jetty-maven-helloworld" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Using Maven</title>

  <para><link xl:href="http://maven.apache.org/">Apache Maven</link> is a
  software project management and comprehension tool. Based on the concept of
  a project object model (POM), Maven can manage a project's build, reporting
  and documentation from a central piece of information.</para>

  <para>It is an ideal tool to build a web application project, and such
  projects can use the <link
  linkend="jetty-maven-plugin">jetty-maven-plugin</link> to easily run the web
  application and save time in development. You can also use Maven to build,
  test and run a project which embeds Jetty.</para>

  <para>First we'll have a look at a very simple HelloWorld java application
  that embeds Jetty, then a simple webapp which makes use of the <link
  linkend="jetty-maven-plugin">jetty-maven-plugin</link> to speed up the
  development cycle.</para>

  <section xml:id="configuring-embedded-jetty-with-maven">
    <title>Using Embedded Jetty with Maven</title>

    <para>To understand the basic operations of building and running against
    Jetty, first review</para>

    <itemizedlist>
      <listitem>
        <para><link linkend="advanced-embedding">embedding with
        Jetty</link></para>
      </listitem>

      <listitem>
        <para><link linkend="jetty-helloworld">Jetty HelloWorld
        example</link></para>
      </listitem>
    </itemizedlist>

    <para>Maven uses convention over configuration, so it is best to use the
    project structure Maven recommends. You can use <emphasis><link
    linkend="archetypes"><link
    xl:href="http://maven.apache.org/guides/introduction/introduction-to-archetypes.html">archetypes</link></link></emphasis>
    to quickly setup Maven projects, but we will set up the structure manually
    for this simple tutorial example:</para>

    <screen><![CDATA[> mkdir JettyMavenHelloWorld
> cd JettyMavenHelloWorld
> mkdir -p src/main/java/org/example]]></screen>

    <section xml:id="creating-helloworld-class">
      <title>Creating the HelloWorld Class</title>

      <para>Use an editor to create the file
      <filename>src/main/java/org/example/HelloWorld.java</filename> with the
      following contents:</para>

      <informalexample>
        <programlisting language="java"><![CDATA[package org.example;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import java.io.IOException;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.handler.AbstractHandler;

public class HelloWorld extends AbstractHandler
{
    public void handle(String target,
                       Request baseRequest,
                       HttpServletRequest request,
                       HttpServletResponse response) 
        throws IOException, ServletException
    {
        response.setContentType("text/html;charset=utf-8");
        response.setStatus(HttpServletResponse.SC_OK);
        baseRequest.setHandled(true);
        response.getWriter().println("<h1>Hello World</h1>");
    }

    public static void main(String[] args) throws Exception
    {
        Server server = new Server(8080);
        server.setHandler(new HelloWorld());
 
        server.start();
        server.join();
    }
}   ]]></programlisting>
      </informalexample>
    </section>

    <section xml:id="creating-embedded-pom-descriptor">
      <title>Creating the POM Descriptor</title>

      <para>The <filename>pom.xml</filename> file declares the project name
      and its dependencies. Use an editor to create the file
      <filename>pom.xml</filename> with the following contents:</para>

      <informalexample>
        <programlisting language="java"><![CDATA[<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>org.example</groupId>
  <artifactId>hello-world</artifactId>
  <version>0.1-SNAPSHOT</version>
  <packaging>jar</packaging>
  <name>Jetty HelloWorld</name>

  <properties>
      <jettyVersion>9.0.2.v20130417</jettyVersion> /// Adapt this to a version found on http://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-maven-plugin/
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>${jettyVersion}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.1</version>
        <executions>
          <execution><goals><goal>java</goal></goals></execution>
        </executions>
        <configuration>
          <mainClass>org.example.HelloWorld</mainClass>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>   ]]></programlisting>
      </informalexample>
    </section>

    <section xml:id="buildng-and-running-embedded-helloworld">
      <title>Building and Running Embedded HelloWorld</title>

      <para>You can now compile and execute the HelloWorld class by using
      these commands:</para>

      <screen><![CDATA[> mvn clean compile exec:java  ]]></screen>

      <para>You can point your browser to <code>http://localhost:8080</code>
      to see the hello world page. You can observe what Maven is doing for you
      behind the scenes by using the <code>mvn dependency:tree</code> command,
      which reveals the transitive dependency resolved and downloaded
      as:</para>

      <screen><![CDATA[> mvn dependency:tree
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'dependency'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Jetty HelloWorld
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree {execution: default-cli}]
[INFO] org.example:hello-world:jar:0.1-SNAPSHOT
[INFO] \- org.eclipse.jetty:jetty-server:jar:9.0.0:compile
[INFO]    +- org.eclipse.jetty:javax.servlet:jar:3.0.0.v201112011016:compile
[INFO]    +- org.eclipse.jetty:jetty-continuation:jar:9.0.0:compile
[INFO]    \- org.eclipse.jetty:jetty-http:jar:9.0.0:compile
[INFO]       \- org.eclipse.jetty:jetty-io:jar:9.0.0:compile
[INFO]          \- org.eclipse.jetty:jetty-util:jar:9.0.0:compile
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4 seconds
[INFO] Finished at: Thu Jan 24 16:19:08 EST 2013
[INFO] Final Memory: 11M/68M
[INFO] ------------------------------------------------------------------------      ]]></screen>
    </section>
  </section>

  <section xml:id="developing-standard-webapp-with-jetty-and-maven">
    <title>Developing a Standard WebApp with Jetty and Maven</title>

    <para>The previous section demonstrated how to use Maven with an
    application that embeds Jetty. Now we will examine instead how to develop
    a standard webapp with Maven and Jetty. First create the Maven structure
    (you can use the <link xl:href="???">maven webapp archetype</link> instead
    if you prefer):</para>

    <screen><![CDATA[> mkdir JettyMavenHelloWarApp
> cd JettyMavenHelloWebApp
> mkdir -p src/main/java/org/example
> mkdir -p src/main/webapp/WEB-INF]]></screen>

    <section xml:id="creating-servlet">
      <title>Creating a Servlet</title>

      <para>Use an editor to create the file
      <filename>src/main/java/org/example/HelloServlet.java</filename> with
      the following contents:</para>

      <informalexample>
        <programlisting language="java"><![CDATA[package org.example;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloServlet extends HttpServlet
{
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        response.setContentType("text/html");
        response.setStatus(HttpServletResponse.SC_OK);
        response.getWriter().println("<h1>Hello Servlet</h1>");
        response.getWriter().println("session=" + request.getSession(true).getId());
    }
}]]></programlisting>
      </informalexample>

      <para>You need to declare this servlet in the deployment descriptor, so
      edit the file <filename>src/main/webapp/WEB-INF/web.xml</filename> and
      add the following contents:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app 
   xmlns="http://java.sun.com/xml/ns/javaee" 
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
   metadata-complete="false"
   version="3.0">

  <servlet>
    <servlet-name>Hello</servlet-name>
    <servlet-class>org.example.HelloServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>Hello</servlet-name>
    <url-pattern>/hello/*</url-pattern>
  </servlet-mapping>

</web-app>]]></programlisting>
      </informalexample>
    </section>

    <section xml:id="creating-plugin-pom-descriptor">
      <title>Creating the POM Descriptor</title>

      <para>The <filename>pom.xml</filename> file declares the project name
      and its dependencies. Use an editor to create the file
      <filename>pom.xml</filename> with the following contents, noting
      particularly the declaration of the<link linkend="jetty-maven-plugin">
      jetty-maven-plugin</link>:</para>

      <informalexample>
        <programlisting language="java"><![CDATA[<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>org.example</groupId>
  <artifactId>hello-world</artifactId>
  <version>0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>Jetty HelloWorld WebApp</name>

  <properties>
      <jettyVersion>9.0.2.v20130417</jettyVersion> /// Adapt this to a version found on http://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-maven-plugin/
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.eclipse.jetty.orbit</groupId>
      <artifactId>javax.servlet</artifactId>
      <version>3.0.0.v201112011016</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <version>${jettyVersion}</version>
      </plugin>
    </plugins>
  </build>

</project>   ]]></programlisting>
      </informalexample>
    </section>

    <section xml:id="building-and-running-web-application">
      <title>Building and Running the Web Application</title>

      <para>Now you can both build and run the web application without needing
      to assemble it into a war by using the <link
      linkend="jetty-maven-plugin">jetty-maven-plugin</link> via the
      command:</para>

      <screen><![CDATA[> mvn jetty:run]]></screen>

      <para>You can see the static and dynamic content at
      <code/>http://localhost:8080/hello</para>

      <para>There are a great deal of configuration options available for the
      jetty-maven-plugin to help you build and run your webapp. The full
      reference is at <link linkend="jetty-maven-plugin">Configuring the Jetty
      Maven Plugin</link>.</para>
    </section>

    <section xml:id="building-war-file">
      <title>Building a WAR file</title>

      <para>You can create a Web Application Archive (WAR) file from the
      project with the command:</para>

      <screen><![CDATA[> mvn package    ]]></screen>

      <para>The resulting war file is in the <filename>target</filename>
      directory and may be deployed on any standard servlet server,
      including<link linkend="configuring-deployment"> Jetty</link>.</para>
    </section>
  </section>
</section>
